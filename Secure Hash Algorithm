#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cstring>
#include <cstdint>
using namespace std;

// SHA-256 constants (first 32 bits of the fractional parts of the cube roots of the first 64 primes)
const uint32_t K[] = {
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

// Initial hash values (first 32 bits of the fractional parts of the square roots of the first 8 primes)
uint32_t H[] = {
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
};

uint32_t right_rotate(uint32_t value, unsigned int shift) {
    return (value >> shift) | (value << (32 - shift));
}

string sha256(const string &message) {
    vector<uint8_t> data(message.begin(), message.end());
    uint64_t orig_len_in_bits = data.size() * 8;
    data.push_back(0x80);
    while ((data.size() * 8) % 512 != 448) {
        data.push_back(0);
    }
    for (int i = 7; i >= 0; --i) {
        data.push_back((orig_len_in_bits >> (i * 8)) & 0xFF);
    }
    
    vector<uint32_t> hash_pieces(H, H + 8);
    for (size_t chunk_index = 0; chunk_index < data.size(); chunk_index += 64) {
        uint32_t words[64];
        for (int i = 0; i < 16; ++i) {
            words[i] = (data[chunk_index + i * 4] << 24) |
                       (data[chunk_index + i * 4 + 1] << 16) |
                       (data[chunk_index + i * 4 + 2] << 8) |
                       (data[chunk_index + i * 4 + 3]);
        }
        for (int i = 16; i < 64; ++i) {
            uint32_t s0 = right_rotate(words[i-15], 7) ^ right_rotate(words[i-15], 18) ^ (words[i-15] >> 3);
            uint32_t s1 = right_rotate(words[i-2], 17) ^ right_rotate(words[i-2], 19) ^ (words[i-2] >> 10);
            words[i] = words[i-16] + s0 + words[i-7] + s1;
        }
        uint32_t a, b, c, d, e, f, g, h;
        tie(a, b, c, d, e, f, g, h) = make_tuple(hash_pieces[0], hash_pieces[1], hash_pieces[2], hash_pieces[3], hash_pieces[4], hash_pieces[5], hash_pieces[6], hash_pieces[7]);
        for (int i = 0; i < 64; ++i) {
            uint32_t S1 = right_rotate(e, 6) ^ right_rotate(e, 11) ^ right_rotate(e, 25);
            uint32_t ch = (e & f) ^ (~e & g);
            uint32_t temp1 = h + S1 + ch + K[i] + words[i];
            uint32_t S0 = right_rotate(a, 2) ^ right_rotate(a, 13) ^ right_rotate(a, 22);
            uint32_t maj = (a & b) ^ (a & c) ^ (b & c);
            uint32_t temp2 = S0 + maj;
            tie(h, g, f, e, d, c, b, a) = make_tuple(g, f, e, d + temp1, c, b, a, temp1 + temp2);
        }
        uint32_t temp[8] = {a, b, c, d, e, f, g, h};  // Define an array
        for (int i = 0; i < 8; ++i) {
        hash_pieces[i] += temp[i];  // Access elements properly
        }
    }
    stringstream ss;
    for (uint32_t val : hash_pieces) ss << hex << setw(8) << setfill('0') << val;
    return ss.str();
}

int main() {
    ifstream file("book_of_mark.txt");
    stringstream buffer;
    buffer << file.rdbuf();
    cout << "SHA-256: " << sha256(buffer.str()) << endl;
    return 0;
}
